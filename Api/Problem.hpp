/*
 * This file is part of the source code of the software program
 * Vampire. It is protected by applicable
 * copyright laws.
 *
 * This source code is distributed under the licence found here
 * https://vprover.github.io/license.html
 * and in the source directory
 */
/**
 * @file Api/Problem.hpp
 * Defines class Problem.
 */

#ifndef __API_Problem__
#define __API_Problem__

#include "FormulaBuilder.hpp"
#include <string>

namespace Vampire {

/**
 * Container of a list of annotated formulas
 *
 * The object acts as a reference counted pointer to a mutable list of formulas.
 * To obtain a true copy of the object, one should call the @b clone function.
 */
class Problem
{
private:
  Problem& operator=(const Problem&);
  Problem(const Problem& p);

public:
  Problem();
  ~Problem();

  /**
   * Return a copy of the problem
   *
   * The copy constructor and operator= do not create a copy of the
   * problem, they give a pointer pointing to the same memory location.
   * To obtain a copy, this function must be used.
   */
  //Problem clone();

  /**
   * Add formula into the problem
   *
   * @warning Problem can contain only formulas coming from one FormulaBuilder object.
   */
  void addFormula(AnnotatedFormula f);

  /**
   * Add formulas parsed from a stream
   *
   * @param s the tsream
   * @param includeDirectory where the parser will look for included files
   */
  void addFromStream(istream& s, std::string includeDirectory="./", bool tptp = true);


  std::vector<AnnotatedFormula>& formulas(){
    return _formulas;
  }

  /**
   * Return number of formulas in this problem
   */
  size_t size();

  /**
   * Return true if problem contains no formulas
   */
  bool empty();

  void preprocess();

  void removeAllFormulas();

  /**
   * Output tff type definitions for non-standard types and for all
   * functions and predicates, whose type contains some non-default sort.
   */
  //void outputTypeDefinitions(ostream& out, bool outputAllTypeDefs=false);

  /**
   * Output the problem in TPTP format.
   * If @c outputTypeDefs is true, type definitions will be output
   * using he @c outputTypeDefinitions() function.
   */
  //void output(ostream& out, bool outputTypeDefs=false, bool outputAllTypeDefs=false);

  /**
   * Output various statistics
   *
   * Currently the statictics are gobal and cummulative. If two preprocessing runs
   * are performed, the numbers in the statistics will be sums of the numbers
   * generated by the two runs.
   */
  void outputStatistics(ostream& out);
private:

  std::vector<AnnotatedFormula> _formulas;
};

}

#endif // __API_Problem__
