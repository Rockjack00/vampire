#!/usr/bin/env python3

import json
import subprocess
import time
import logging
import os
import sys
import threading

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

class WorkerStatusUpdater(threading.Thread):
    """Thread that runs in the background publishing worker READY status"""

    def __init__(self):
        threading.Thread.__init__(self)
        self.logger = logging.getLogger("WorkerStatusUpdater")
        self.logger.setLevel(logging.DEBUG)
        self.setDaemon(True)
        self.logger.info("WorkerStatusUpdater started")

    def check_process_status(self):
        status = 'READY'
        output = subprocess.check_output(['ps', 'ax', '-ocomm']).decode("utf-8").strip()

        if 'orted' in output:
            status = 'BUSY'

        if 'sshd' not in output:
            status = 'ERROR'

        if 'vampire' in output:
          logger.info("Vampire detected")

        return status


    def write_status(self,status):
        data = {"status": status, "timestamp": int(time.time())}
        with open(
                "/competition/worker_node_status.json",
                "w+",
        ) as statusfile:
            statusfile.write(json.dumps(data))

    def run(self):
        while True:
            status = self.check_process_status()
            self.write_status(status)
            self.logger.info("Worker updated status")
            time.sleep(1)

def get_main_ip():
    with open("/competition/leader_node_status.json") as f:
      status = json.loads(f.read()) 
      return status.get("nodeIp")

if __name__ == "__main__":
    logger = logging.getLogger("Worker")
    logger.setLevel(logging.DEBUG)
    logger.info("Worker started") 

    updater = WorkerStatusUpdater()
    updater.start()

    main_ip = get_main_ip()
    logger.info("Found leader ip to be %s",str(main_ip))

    while True:
    	os.system("competition/worker_vampire.sh")

    updater.join()
